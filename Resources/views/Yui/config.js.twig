YUI_config = {
{# This doesn't really work, see comment on libbit group #}
{% if app.environment == 'dev' %}
    debug: true,
{% endif %}
    combine: true,
    comboBase : '{{ path('libbit_yui_minify') }}?b={{ base_url }}&f=',
    root: 'yui3/build/',
    lang: '{{ app.request.locale }}',
    filter : {
        'searchExp': '(^(?:[^&]+&[^&]+)|[^&]+)&(?!f=)',
        'replaceStr': '$1,'
    },

    groups: {
        yui2: {
            combine: true,
            root: '2in3/dist/build/',
            patterns: {
                'yui2-': {
                    configFn: function(me) {
                        if(/-skin|reset|fonts|grids|base/.test(me.name)) {
                            me.type = 'css';
                            me.path = me.path.replace(/\.js/, '.css');
                            me.path = me.path.replace(/\/yui2-skin/, '/assets/skins/sam/yui2-skin');
                        }
                    }
                }
            }
        },

        gallery: {
            combine: true,
            root: 'yui3-gallery/build/',
            patterns: {
                'gallery-': {
                    configFn: function(me) {
                        if (/-skin/.test(me.name)) {
                            me.type = 'css';
                            me.name = me.name.replace('-skin', '');
                            me.path = me.name + '/assets/' + me.name + '.js';
                            me.path = me.path.replace(/\.js/, '.css');
                            me.path = me.path.substring(0, me.path.lastIndexOf('/')) + me.path.substring(me.path.lastIndexOf('/'));
                        }
                    }
                }
            }
        },

        libbit: {
            combine: true,
            root: 'yui3-libbit/build/',
            patterns: {
                'libbit-': {
                    configFn: function(me) {
                        // TODO: Create a better way to specify debugging across all groups
                        me.path = me.path.replace('-min', '-debug');
                        if (/-skin/.test(me.name)) {
                            me.type = 'css';
                            me.path = me.path.replace(/\.js/, '.css');
                            me.path = me.path.replace('-skin', '');
                            me.path = me.path.replace('-min', '');
                            me.path = me.path.substring(0, me.path.lastIndexOf('/')) + '/css' + me.path.substring(me.path.lastIndexOf('/'));
                        }
                    }
                }
            }
        },

        // TODO: Specify this mapping dynamically somehow
        docgenadmin: {
            combine: true,
            comboBase : '{{ path('libbit_yui_minify') }}?b={{ base_url_test }}&f=',
            root: 'docgenadmin/build/',
            patterns: {
                'docgenadmin-': {
                    configFn: function(me) {
                        // TODO: Create a better way to specify debugging across all groups
                        me.path = me.path.replace('-min', '-debug');
                        if (/-skin/.test(me.name)) {
                            me.type = 'css';
                            me.path = me.path.replace(/\.js/, '.css');
                            me.path = me.path.replace('-skin', '');
                            me.path = me.path.replace('-min', '');
                            me.path = me.path.substring(0, me.path.lastIndexOf('/')) + '/css' + me.path.substring(me.path.lastIndexOf('/'));
                        }
                    }
                }
            }
        }
    }
}

{% for key, group in groups %}
YUI_config.groups['{{ key }}'] = {{ group|json_encode|raw }}
{% endfor %}

{# Global YAHOO object, fixes multiple instances of YAHOO treeview #}
var YAHOO; YUI().use('yui2-treeview', function(Y) { YAHOO = Y.YUI2; });
{# Global YUI object, to allow lazyloading #}
var Y = YUI();
